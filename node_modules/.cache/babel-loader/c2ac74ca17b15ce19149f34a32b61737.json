{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useFocusEffect from './useFocusEffect';\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\n\nexport default function SceneView({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options\n}) {\n  const navigatorKeyRef = React.useRef();\n  const {\n    onOptionsChange\n  } = React.useContext(NavigationBuilderContext);\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const optionsRef = React.useRef(options);\n  const getOptions = React.useCallback(() => optionsRef.current, []);\n  const {\n    addOptionsGetter,\n    hasAnyChildListener\n  } = useOptionsGetters({\n    key: route.key,\n    getState,\n    getOptions\n  });\n  const optionsChange = React.useCallback(() => {\n    optionsRef.current = options;\n\n    if (!hasAnyChildListener) {\n      onOptionsChange(options);\n    }\n  }, [onOptionsChange, options, hasAnyChildListener]);\n  useFocusEffect(optionsChange);\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  const setCurrentState = React.useCallback(child => {\n    const state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(r => r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n        state: child\n      }) : r)\n    }));\n  }, [getState, route.key, setState]);\n  const context = React.useMemo(() => ({\n    state: route.state,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    getKey,\n    setKey,\n    addOptionsGetter\n  }), [getCurrentState, getKey, route.state, setCurrentState, setKey, addOptionsGetter]);\n  return /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, /*#__PURE__*/React.createElement(StaticContainer, {\n    name: screen.name // @ts-expect-error: these properties exist on screen, but TS is confused\n    ,\n    render: screen.component || screen.children,\n    navigation: navigation,\n    route: route\n  }, 'component' in screen && screen.component !== undefined ? /*#__PURE__*/React.createElement(screen.component, {\n    navigation: navigation,\n    route: route\n  }) : 'children' in screen && screen.children !== undefined ? screen.children({\n    navigation,\n    route\n  }) : null)));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["options","navigatorKeyRef","React","onOptionsChange","getKey","optionsRef","getOptions","hasAnyChildListener","useOptionsGetters","key","route","optionsChange","useFocusEffect","setKey","getCurrentState","state","getState","currentRoute","r","setCurrentState","child","setState","routes","context","addOptionsGetter","screen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useFocusEffect from './useFocusEffect';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const { onOptionsChange } = React.useContext(NavigationBuilderContext);\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const optionsRef = React.useRef<object | undefined>(options);\n  const getOptions = React.useCallback(() => optionsRef.current, []);\n\n  const { addOptionsGetter, hasAnyChildListener } = useOptionsGetters({\n    key: route.key,\n    getState,\n    getOptions,\n  });\n\n  const optionsChange = React.useCallback(() => {\n    optionsRef.current = options;\n    if (!hasAnyChildListener) {\n      onOptionsChange(options);\n    }\n  }, [onOptionsChange, options, hasAnyChildListener]);\n\n  useFocusEffect(optionsChange);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      addOptionsGetter,\n    }),\n    [\n      getCurrentState,\n      getKey,\n      route.state,\n      setCurrentState,\n      setKey,\n      addOptionsGetter,\n    ]\n  );\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          // @ts-expect-error: these properties exist on screen, but TS is confused\n          render={screen.component || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {'component' in screen && screen.component !== undefined ? (\n            <screen.component navigation={navigation} route={route} />\n          ) : 'children' in screen && screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}